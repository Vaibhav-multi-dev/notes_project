<% layout('layouts/boilerplate')%>
    <header>
        <h1 class="backend-sec-heading">Section 43: YelpCamp - Errors & Validating Data</h1>
        <nav class="sec-nav-li" id="sec43-nav">
            <ul>
                <li><a href="#Lec439">Lecture 439</a></li>
                <li><a href="#Lec440">Lecture 440</a></li>
                <li><a href="#Lec441">Lecture 441</a></li>
                <li><a href="#Lec442">Lecture 442</a></li>
                <li><a href="#Lec443">Lecture 443</a></li>
                <li><a href="#Lec444">Lecture 444</a></li>
                <li><a href="#Lec445">Lecture 445</a></li>
                <li><a href="#Lec446">Lecture 446</a></li>
            </ul>
        </nav>
    </header>
    <article id="Lec439">
        <header class="backend-article-header">
            <h2><span class="backend-lec-heading">Lecture 439: Where to next with YelpCamp?</span></h2>
        </header>
        <p class="sec-para-main">This section we learn more about error handling and a new piece of software called
            JOI validation which helps us to validate the <span class="keyword">req.body</span> even before
            sending it to the server. We also integrate client-side validation in our YelpCamp so user can't submit
            a camp without proper entries.</p>
    </article>
    <article id="Lec440">
        <header class="backend-article-header">
            <h2><span class="backend-lec-heading">Lecture 440: Client side form validation</span></h2>
        </header>
        <p class="sec-para-main">To perform client-side validation in our make a new campground form and edit a
            campground form, we first attach <span class="keyword">required</span> attribute to all the available
            fields and then add a class of <span class="keyword">novalidate</span> to the form to prevent the
            default validation by the HTML and allow the bootstrap validation to take over. Then we add the
            class of <span class="backend-tags">validated-form</span> or some other class name which matches the
            classname of the javascript function which we attach at the bottom of the js page to add the bootstrap
            validation to the form.
        </p>
        <div class="src-link">
            <p>Sources -</p>
            <ul>
                <li> <a href="https://getbootstrap.com/docs/5.1/forms/validation/#custom-styles">Link for bootstrap
                        validation form</a></li>
            </ul>
        </div>
    </article>
    <article id="Lec441">
        <header class="backend-article-header">
            <h2><span class="backend-lec-heading">Lecture 441: Basic Error handler</span></h2>
        </header>
        <p class="sec-para-main">We just attach a very basic error handler like we did in previous section at the
            end of our app.</p>
        <div class="article-example">
            <code class="code-snippet"><pre>
<p>Example of an error handler -</p>
app.use((err,req,res,next) =>{
    res.send("Handling errors the easy way")
})
</pre></code>
        </div>
    </article>
    <article id="Lec442">
        <header class="backend-article-header">
            <h2><span class="backend-lec-heading">Lecture 442: Defining ExpressError Class</span></h2>
        </header>
        <p class="sec-para-main">Nothing new we just add the <span class="backend-tags">wrapAsync</span> wrapper
            function and <span class="backend-tags">ErrorApp</span> class to each of our YelpCamp routes.</p>
    </article>
    <article id="Lec443">
        <header class="backend-article-header">
            <h2><span class="backend-lec-heading">Lecture 443: More Errors</span></h2>
        </header>
        <p class="sec-para-main">We just add a bit of logic in our routes to throw a err to check whether our error
            handling routes are working or not. We also add a route at the end which hits if we make an invalid
            request i.e. if it doesn't match any of the above routes of the app.</p>
        <div class="article-example">
            <code class="code-snippet"><pre>
app.get('*', (req, res) => {
    res.send("Invalid page")
})
</pre></code>
        </div>
    </article>
    <article id="Lec444">
        <header class="backend-article-header">
            <h2><span class="backend-lec-heading">Lecture 444: Defining Error Template</span></h2>
        </header>
        <p class="sec-para-main">We now make an error template page which will be rendered every time we make an
            error instead of the default response which we got earlier. In this error page, we pass our <span
                class="keyword">err</span> object to the error page to display the message and status generated by
            the error.</p>
        <div class="extra-info">
            <p>Note: Here we set the message explicitly rather than extracting it from the <span
                    class="keyword">err</span> object because we pass the whole err object to the template and there
                is no default message generated by errors and status is set by default to <span
                    class="backend-tags">500</span>.</p>
        </div>
        <div class="article-example">
            <code class="code-snippet"><pre>
<p>Logic to set up error template - </p>
app.use((err, req, res, next) => {
    const { status = 500 } = err;
    if (!err.message) err.message = "Something didn't work as expected";
    res.status(status).render('error', { err });
})
</pre></code>
        </div>
    </article>
    <article id="Lec445">
        <header class="backend-article-header">
            <h2><span class="backend-lec-heading">Lecture 445: JOI Schema Validation</span></h2>
        </header>
        <p class="sec-para-main">To add server side validation to our App we use <span class="keyword">JOI</span>.
            JOI is a tool in which we define the schema of the product that we need to check, the validation by JOI
            is done at the request level before sending data to mongoose. JOI also gives us more control over our
            errors. A sample of how it is implemented in our YelpCamp.
        </p>
        <div class="article-example">
            <code class="code-snippet"><pre>
<p>Schema for our Campground -</p>
const campgroundSchema = Joi.object({
        campground: Joi.object({
            title: Joi.string().required(),
            price: Joi.number().required().min(0),
            image: Joi.string().required(),
            description: Joi.string().required(),
            location: Joi.string().required()
        }).required()
    })
<p>Error checking with JOI -</p>
const { error } = campgroundSchema.validate(req.body);
    if (error) {
        const errMessage = (error.details.map(el => el.message).join(","))
        console.log(error.details[0].message);        <span class="code-comment">//Method to use if you only expect one error</span>
        throw new ExpressError(errMessage, 400);
    }
</pre></code>
        </div>
        <div class="src-link">
            <p>Sources for further reading -</p>
            <ul>
                <li><a href="https://joi.dev/api/?v=17.6.0">JOI documentation</a></li>
                <li><a
                        href="https://www.digitalocean.com/community/tutorials/how-to-use-joi-for-node-api-schema-validation">Schema
                        validation </a> article on digital ocean.
                    (Provided by Zarko)
                </li>
                <li> <a href="https://www.youtube.com/watch?v=u9kxYilQ9l8">Video on schema validation</a> (Provided
                    by Louli) </li>
            </ul>
        </div>
    </article>
    <article id="Lec446">
        <header class="backend-article-header">
            <h2><span class="backend-lec-heading">Lecture 446: JOI validation middleware</span></h2>
        </header>
        <p class="sec-para-main">We now put our logic for JOI schema validation which we setup while making a new
            campground into a separate middleware so we could also implement it for editing an existing campground.
            We move the JOI campgroundShema for validation into a separate file and export it to use in our main
            <span class="backend-tags">index.js</span> file.
        </p>
    </article>